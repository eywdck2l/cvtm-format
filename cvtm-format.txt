The CVTM format

Overview

The CVTM is a format for storing disk images.

A CVTM containing only the configuration can be written to the
underlying storage.  Then an image writer can add disk images to the
CVTM.  The underlying device does not need to support atomic writes.  It
is the job of the format to guarantee the CVTM is in a valid state even
in the case of power loss during writing of an image.

A public key can optionally be provided.  In that case, each image is
encrypted with a random symmetric key, which is stored encrypted with
the public key.  Knowing the sizes or contents of the images or how many
images have been written requires the public key.

For example, the image writer is a flash card adapter.  The underlying
storage is a flash card that plugs in to the adapter.  The adapter
presents itself to the host (for instance a camera) as a normal flash
card.  When powered on, the adapter adds a new image to the CVTM.  Its
size grows as the host writes data to the adapter.

The CVTM consists of a header, image area, and several end pointers.
The header contains information about its format and the format of the
images.  An end pointer points to the end of the image area currently
used.  Among the end pointers with a good checksum, the one last written
(i.e. the one whose value is the highest) is effective when reading.

The image area is continuous.  It contains images.  Images are written
by the image writer.  Their format is similar to the format for virtual
machine images.  An image's contents are divided into grains.  At the
beginning is the grain mapping table and optionally one or more logs.
Following that are the grains.  Following the grains is the image
ending.  The image ending contains a pointer to the previous image, the
start address of the image and information about the image such as the
capacity of the image, grain size, and the symmetric image key.  If the
image is encrypted, the image ending is encrypted with the public key
provided in the header, and the rest of the image is encrypted with the
symmetric key.

The image ending contains a pointer to the start of the current image
and a pointer to the end of the previous image.  All the image endings
form a singly linked list.  A sentinel instead of a normal image ending
is defined.  The list of images end when either the sentinel is
encountered or the location of the next image ending in the list is not
in the image area.

Padding may be added between the header, the global log, the end
pointers, and the images.  For example, to align them to sector
boundaries of the underlying storage device for faster writes.

The following is an example CVTM with one end pointer following the
header and another end pointer at the end.  The one at the end has a
greater `image_end` than the one at the beginning.  So the end pointer
at the end of the CVTM is effective.  It points to the final image.  The
image ending of each image points to the previous image.  The image
ending of the first image points to a sentinel.

        header
          + ...
          + end_pointer_location ------+
          + end_pointer_location ------|---+
          + global_log_location  --+   |   |
          + ...                    |   |   |
                                   |   |   |
        padding                    |   |   |
                                   |   |   |
        global log               <-+   |   |
                                       |   |
        padding                        |   |
                                       |   |
        end_pointer (not newest) <-----+   |
          + ...                            |
          + end                            |
          + ...                            |
                                           |
        padding                            |
                                           |
        sentinel          <---+            |
                          <-+ |            |
        image               | |            |
          + ...             | |            |
          + image ending    | |            |
            + ...           | |            |
            + image_start --+ |            |
            + prev        ----+            |
            + ...                          |
                                           |
        more images ...                    |
                          <-+<-+           |
        image               |  |           |
          + ...             |  |           |
          + image ending    |  |           |
            + ...           |  |           |
            + image_start --+  |           |
            + prev        -----+           |
            + ...                          |
                          <-+<-+           |
        image               |  |           |
          + ...             |  |           |
          + image ending    |  |           |
            + ...           |  |           |
            + image_start --+  |           |
            + prev        -----+           |
            + ...                          |
                          <-+<-+           |
        image               |  |           |
          + ...             |  |           |
          + image ending    |  |           |
            + ...           |  |           |
            + image_start --+  |           |
            + prev        -----+           |
            + ...                          |
                                 <-+       |
        unused space               |       |
                                   |       |
        end_pointer (newest)     <-|-------+
          + ...                    |
          + end                  --+
          + ...

All numbers are big endian unsigned unless specified otherwise.  The
structure of entries are described like a packed C struct, that is, no
padding is present between fields.  The term "block" refers to 512-octet
blocks.

CVTM Header

The CVTM header consists of configuration entries.  The header is
read-only to the image writer.

	struct header_entry {
		char type[16];
		uint32 length;
		char opaque[];
	};

`type` is a 16 octet string identifying the type of the entry.  If a
text string is used, it is padded with null bytes on the right.  To
match against a defined entry type, the whole field is compared, not
only up to the first null byte.  Unknown types are ignored.  This way,
new entries can be defined with a random `type` with very little
probability that it has the same `type` as another defined type.  `type`
does not have to be text.  If specified as text, it is case sensitive.

`length` is the total length of the entry including the `type` and
`length` fields in octets.

The `length`s given in the following is the length for the entries in
this version of the specification.  In newer versions, new fields may be
added to the end of the entries.  Then `length` will change.
Implementations must accept entries with `length`s greater than those
defined in this document and ignore the additional fields.

	struct general_configuration {
		char type[16] = "CVTM-MAGIC";
		uint32 length = 56;
		char checksum[32];
		uint32 header_length;
	};

The first entry is the general configuration.  `checksum` is the sha256
the whole header.  It is set to zero when computing the checksum.  The
image writer should check the checksum.  If not, it assumes the storage
is corrupted and does not write anything to the CVTM.

`header_length` is the length of the header in octets.  The last header
entry must end at `header_length`.  Because the checksum ensures the
CVTM is not corrupted, implementations may assume that a header with a
good checksum but with an entry crossing the header boundary is a future
format and ignore that entry.

	struct global_log_location {
		char type[16] = "GLOBAL-LOG-LOCAT";
		uint32 length = 32;
		uint32 blk_start;
		uint32 blk_count;
		uint32 severity;
	};

TODO Define severity and the format of log messages.  And define what
happens when a log is full.

The global log location entry specifies a position for the card to log a
message.  `blk_start` and `blk_count` are the start address and maximum
length of the message in units of 512-octet blocks.  There may be
multiple global log locations, each with a different severity.  Under
normal conditions, logs are written to the encrypted per image logs.
Thus `severity` should be set so that this is only used when per image
logs may be unavailable, like when the public key is not recognized or
there is no space left for a new image.

Unlike the image log, the global log is not encrypted.  It may be
undesirable to log sensitive information here.  Thus implementations
must not log anything not allowed by `sensitivity` in the global log.

	struct image_log_conf {
		char type[16] = "IMG-LOG-CONF";
		uint32 length = 28;
		uint32 log_size;
		uint32 severity;
	};

The image log configuration instructs the image writer to add logs to
images.  `log_size` defines the size of the log in blocks.  `severity`
is the same as that for the global log.  Unlike for the global log, here
It is only an advice.  Implementations may add a log without a
corresponding image log configuration, for example in the case of an
error.

	struct end_pointer_location {
		char type[16] = "END-POINTER-LOCA";
		uint32 length = 24;
		uint32 end_pointer_pos;
	};

The end pointer location entry specifies a block for the end pointer.
`end_pointer_pos` is the block index at which an end pointer resides.
There should be more than 1 of this entry, one for each end pointer.

	struct public_key_rsa {
		char type[16] = "KEY-RSA";
		uint32 length;
		char key[];
	};

The RSA public key entry means the image endings are encrypted with
RSAES-PKCS1-v1.5.  `key` is a DER-encoded RSAPublicKey.

	struct image_xts_aes_256 {
		char type[16] = "SYM-XTS-AES-256";
		uint32 length = 20;
	};

The image XTS-AES-256 entry specifies the images (except for image
endings) are to be encrypted with XTS-AES-256.  The key is randomly
generated by the image writer and stored in the corresponding image
ending.  The key scope start is 0.  The data uint size is 512 octets.

	struct new_image_basic {
		char type[16] = "IMGTYPE-BASIC";
		uint32 length = 25;
		uint32 grain_count;
		uint8 grain_size_exp;
	};

The image type entries specify the size and initial contents of the
image the image writer will present to the host.  Currently, the only
supported type is the basic type, which is a fixed size image filled
with zeros.  In the future, new image types and conditionals may be
added.  For example, the size might be determined by the space left on
the underlying storage.  And the image might have contents such as a
file system.

TODO Specify what happens if the new image might not fit in the unused
space of the underlying storage.  And work out a way to both provide
initial contents and allow the size of the image to be determined by the
remaining space.  A fixed base image will not support the size of the
overlay image having a variable size.  It is possible to have several
base images, and let the image writer choose one based on the space
left.  Then each base image will take up some space, which may lead to
inefficient space usage.  Maybe we can allow a program to be run on the
image writer.  In that case the program has to run fast enough.

`grain_count` is the capacity of the image in grains.  Capacities that
are not divisible by the grain size are not supported.  `grain_size_exp`
specifies the grain size as (1 << grain_size_exp) blocks.

	struct image_ending_size {
		char type[16] = "IMG-ENDING-SIZE";
		uint32 length = 21;
		uint8 ending_size;
	}

The image ending size entry specifies the size of the image endings.
The size of image endings may exceed 1 block, because it may be
encrypted with an RSA modulus longer than 4096 bits.  `ending_size` is
the count of 512-octet blocks each image ending occupies.  If this entry
is not present, `ending_size` defaults to 1.

	struct sd_cid {
		char type[16] = "SD-CID";
		uint32 length = 35;
		char cid[15];
	};

The SD CID entry specifies the first 15 octets of the CID if the image
writer communicates with the host using the SD interface.  The CRC is
computed by the image writer.  If the SD interface is used and this
entry does not exist, the image writer may use a default CID or give up.

End Pointer

	struct end_pointer {
		char checksum[32];
		uint32 image_end;
		char reserved[476];
	};

The end pointer points to the end of the blocks allocated to images.
`image_end` is the block after the last block allocated to images.  When
at least one image has been written, blocks from (image_end -
ending_size) (inclusive) to image_end (exclusive) are the image ending
of the last image written.  `checksum` is a sha256 checksum computed
over the `end_pointer` block, including the reserved space.  It is set
to zero when computing the checksum.  If it is invalid, this block is
corrupted, and other `end_pointer` blocks are used.

If multiple `end_pointer` blocks have good checksums, the one with the
highest `image_end` address is effective.  Multiple `end_pointer` blocks
should be present in a CVTM to allow updating them separately so that at
least one will be valid even after a power loss.  Each `end_pointer`
block must be either before or after the image area, not dividing the
image area.  Multiple `end_pointer` blocks should be present.

To grow an image, at least one `end_pointer` block need to be updated.
The ones with bad checksum, if any, are updated first.  Then the one
with the lowest `image_end` is updated.  If more than one `end_pointer`
blocks exist, as what should be the case, all of the ones with the
highest `image_end` should not be overwritten until another
`end_pointer` is overwritten and they no longer contain the highest
address.

Images

Images take continuous space in the CVTM.  Because new functionalities
may be added, it is possible not all implementations understand what
space is reserved by a new functionality.  Thus when the CVTM is
created, a sentinel should be used to mark the beginning of the image
area.  The sentinel also allows allocating unused space in the CVTM to
obscure how much data has been written.

Data from the start of an image until the image ending is encrypted
using the symmetric algorithm.  There may be unused space between the
grain mapping and the grains, such as to align the grains to allocation
unit boundaries.  The card should overwrite the data in it to give a
read-only attacker less knowledge.

TODO What should be written to the logs?

In the case of XTS-AES-256, the tweak associated with the first block of
the grain mapping is 0.

To grow an image, a new image ending is written to the new ending
position.  When the write completes, an end pointer is updated to point
to the new image ending.  When this write completes, data may be written
up to and excluding the new image ending.

The image endings and end pointers have a checksum, so a partially
updated block can be identified.  Even if a power loss occurs during
this process, the CVTM is in a valid state.  The new image ending is the
same as the previous one.  Thus asymmetric encryption only needs to be
done once per image.

The image ending contains entries in the same format as the header
entries.  It is stored encrypted with the asymmetric algorithm specified
in the header or in plaintext if no asymmetric algorithm is specified.
Currently the only supported asymmetric encryption algorithm is
RSAES-PKCS1-v1.5.  Image endings longer than the message length of the
underlying asymmetric encryption algorithm are not supported.  Image
endings shorter than the message length or 512 octets if no encryption
is applied are padded with zeros.  The contents of the padding are
ignored when being read.

	struct image_configuration_basic {
		char type[16] = "IMGCONF-BASIC";
		uint32 length = 76;
		char checksum[32];
		uint32 image_ending_length;
		uint32 image_start;
		uint32 prev;
		uint32 grain_count;
		uint32 grain_size_exp;
		uint32 grains_offset;
	}

For normal image endings, the first entry is the general image
information.  `checksum` is the sha256 checksum of the whole image
ending, including the padding.  It is set to zero when computing the
checksum.

`image_ending_length` is the length of the image ending excluding the
padding in octets.  Same as for the header, the final image ending entry
must end at `image_ending_length`.  Implementations may ignore an entry
crossing the boundary.  `grain_count` and `grain_size_exp` mean the same
as previously defined for the archive header.  They also appear here,
because support for more than one image configurations in the same CVTM
may be added in the future, and these fields will help telling what
format an image is in.

`prev` is the block index after the previous image.  It is the value in
the effective end pointer before the new image is added.  `image_start`
is the address of the grain mapping in 512-octet blocks.  (image_start +
grains_offset) is the address of the first grain stored (that is, stored
grain address 0).

In addition to normal image endings, a sentinel marking no more images
exist in the archive is defined.  It has the following format.

	struct image_ending_sentinel {
		char type[16] = "NO-MORE-IMAGES";
		uint32 length = 52;
		char checksum[32];
	};

`checksum` is the same as that in `image_configuration_basic`.  For
512-octet image endings, its value in hex is:

  A0C5414A0CC4B624D53551F38B486CA464AA408E2A300A737846E43D27262197

	struct image_key_xts_aes_256 {
		char type[16] = "KEY-XTS-AES-256";
		uint32 length = 84;
		char key[64];
	};

The image key XTS-AES-256 entry contains the key used when the image is
encrypted with XTS-AES-256.

An image may have a log between the grain mapping and the grains.  It is
encrypted along with the image.  If sensitive information is to be
logged, and no error makes the image log inaccessible, this log is
preferred over the global log.

	struct image_log_location {
		char type[16] = "IMG-LOG-LOCATION";
		uint32 length = 28;
		uint32 log_offset;
		uint32 log_size;
	}

The `image_log_location` specifies a location for an image log.
`log_offset` is the offset from the start of the image to the start of
the log in blocks.  `log_size` is the size of the log in blocks.  There
may be zero or more of this entry present in an image configuration,
each corresponding to a log.


Grain Mapping

The grain mapping consists of `grain_count` entries.  Each entry is a
32-bit two's complement big endian integer.  They correspond to the
status of the grains in the image.  If an entry is non-negative, it is
the index of the corresponding grain stored in the image.  The negative
numbers have special meanings.

   o -1

      The grain contains all zeros.

   o -2147483648 ~ -2

      Reserved.
